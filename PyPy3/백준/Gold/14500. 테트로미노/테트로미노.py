import sys
input = sys.stdin.readline

# 입력 받기
n, m = map(int, input().split())
board = [list(map(int, input().split())) for _ in range(n)]

# 모든 테트로미노 모양 정의 (상대 좌표)
tetrominos = [
    # I 모양 (2가지)
    [(0,0), (0,1), (0,2), (0,3)],
    [(0,0), (1,0), (2,0), (3,0)],
    
    # O 모양 (1가지) 정사각형
    [(0,0), (0,1), (1,0), (1,1)],
    
    # L 모양 (8가지)
    [(0,0), (1,0), (2,0), (2,1)],
    [(0,0), (0,1), (0,2), (1,0)],
    [(0,0), (0,1), (1,1), (2,1)],
    [(0,2), (1,0), (1,1), (1,2)],
    [(0,0), (0,1), (1,0), (2,0)],
    [(0,0), (1,0), (1,1), (1,2)],
    [(0,1), (1,1), (2,0), (2,1)],
    [(0,0), (0,1), (0,2), (1,2)],
    
    # Z 모양 (4가지)
    [(0,0), (0,1), (1,1), (1,2)],
    [(0,1), (1,0), (1,1), (2,0)],
    [(0,1), (0,2), (1,0), (1,1)],
    [(0,0), (1,0), (1,1), (2,1)],
    
    # T 모양 (4가지)
    [(0,0), (0,1), (0,2), (1,1)],
    [(0,0), (1,0), (1,1), (2,0)],
    [(0,1), (1,0), (1,1), (1,2)],
    [(0,1), (1,0), (1,1), (2,1)]
]

# 최대값 저장 변수
max_sum = 0

# 모든 칸에서 시작하여 모든 테트로미노 모양 시도
for i in range(n):
    for j in range(m):
        for tetromino in tetrominos:
            # 현재 테트로미노의 합계
            current_sum = 0
            # 유효한 테트로미노인지 확인
            valid = True
            
            # 테트로미노의 각 블록 확인
            for di, dj in tetromino:
                ni, nj = i + di, j + dj
                
                # 범위를 벗어나면 유효하지 않음
                if not (0 <= ni < n and 0 <= nj < m):
                    valid = False
                    # 멈춰!
                    break
                
                # 현재 블록 합계 더하기
                current_sum += board[ni][nj]
            
            # 유효한 테트로미노면 최대값 갱신
            if valid:
                max_sum = max(max_sum, current_sum)

print(max_sum)