# 문제 해결 방법
# 하루는 24시간이다. 따라서 화물차의 작업 시작 시간과 종료 시간은 0시부터 23시까지이다.
# 1. 화물차의 작업 시작 시간과 종료 시간을 입력받는다.
# 2. 화물차의 작업 종료 시간을 기준으로 오름차순 정렬한다.
#    이는 그리디 알고리즘의 핵심으로, 가장 빨리 끝나는 작업부터 선택하면 이후 시간에 더 많은 작업을 배치할 가능성이 높아진다.
# 3. 정렬된 순서대로 순회하며, 이전 작업 종료 시간 이후에 시작하는 작업만 선택한다.
# 4. 이 방법으로 항상 최대 화물차 수를 구할 수 있다.

# 배운점: 
# 1. 종료 시간 기준 정렬은 이 문제에서 최적해를 보장하는 그리디 알고리즘이다.
# 2. 가장 빨리 끝나는 작업부터 선택하면 남은 시간에 더 많은 작업을 배치할 수 있다.
# 3. 모든 조합을 확인하는 방법(O(2^N))보다 정렬 후 한 번의 순회로 해결하는 방법(O(N log N))이 훨씬 효율적이다.
# 4. 첫 작업을 최적으로 선택한 후, 남은 문제에도 동일한 원칙을 적용해 최적해를 찾을 수 있는 최적 부분 구조를 가진다.

T = int(input())

for test_case in range(1, T+1):
    # N: 신청서 수
    N = int(input())
    # time: 화물차의 작업 시작 시간과 종료 시간을 저장하는 리스트
    time = []
    # 화물차의 작업 시작 시간과 종료 시간을 입력받는다.
    for _ in range(N):
        time.append(list(map(int, input().split())))
    # 화물차의 작업 종료 시간을 기준으로 오름차순 정렬한다.
    time.sort(key=lambda x: x[1])
    # 최대 화물차의 수를 구하기 위한 카운터
    cnt = 0
    # end: 마지막으로 선택한 화물차의 작업 종료 시간
    end = 0
    for i in range(N):
        # 현재 작업의 시작 시간이 이전 작업의 종료 시간 이후라면 선택
        if time[i][0] >= end:
            end = time[i][1]
            cnt += 1
    print(f'#{test_case} {cnt}')